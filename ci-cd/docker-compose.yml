services:
  postgres:
    image: postgres:15
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - microservices-network

  userservice:
    build:
      context: ../backend/UserService
      dockerfile: Dockerfile
    ports:
      - "5280:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_HTTP_PORTS=8080
      - ConnectionStrings__DefaultConnection=Host=postgres;Port=5432;Database=microservices;Username=postgres;Password=postgres
      - Jwt__Key=YourSuperSecretKey12345678901234567890
      - Jwt__Issuer=MicroservicesApp
      - Jwt__Audience=MicroservicesClient
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - microservices-network

  locationservice:
    build:
      context: ../backend/LocationService
      dockerfile: Dockerfile
    ports:
      - "5281:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_HTTP_PORTS=8080
      - ConnectionStrings__DefaultConnection=Host=postgres;Port=5432;Database=microservices;Username=postgres;Password=postgres
      - Jwt__Key=YourSuperSecretKey12345678901234567890
      - Jwt__Issuer=MicroservicesApp
      - Jwt__Audience=MicroservicesClient
    depends_on:
      postgres:
        condition: service_healthy
      userservice:
        condition: service_started
    networks:
      - microservices-network

networks:
  microservices-network:
    driver: bridge

volumes:
  postgres-data:
